labs(x = "Residue", y = "Count", fill = "Amino Acid")
# Remove rows with '-' in the 'amino_acid' column
polymorphisms_long <- polymorphisms_long %>% filter(amino_acid != '-')
ggplot(polymorphisms_long, aes(x = residue, fill = amino_acid)) +
geom_bar(na.rm = TRUE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "Residue", y = "Count", fill = "Amino Acid")
ggplot(polymorphisms_long, aes(x = residue, fill = amino_acid)) +
geom_bar() +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) +
labs(x = "Residue", y = "Count", fill = "Amino Acid")
ggplot(polymorphisms_long, aes(x = residue, fill = amino_acid)) +
geom_bar() +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none") +
labs(x = "Residue", y = "Count")
ggplot(polymorphisms_long, aes(x = residue, fill = amino_acid)) +
geom_bar(width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Count")
# Convert 'residue' to a factor and specify the levels
polymorphisms_long$residue <- factor(polymorphisms_long$residue, levels = names(polymorphisms_filtered)[-1])
# Create the plot
ggplot(polymorphisms_long, aes(x = residue, fill = amino_acid)) +
geom_bar(width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Count")
ggplot(polymorphisms_long, aes(x = residue, fill = amino_acid)) +
geom_bar(width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
scale_y_log10() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Count (log scale)")
ggplot(polymorphisms_long, aes(x = residue, fill = amino_acid)) +
geom_bar(width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
coord_cartesian(ylim = c(0, 500)) +  # Adjust these values as needed
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Count")
polymorphisms_long <- polymorphisms_long %>%
group_by(residue) %>%
mutate(freq = n() / sum(n()))
# Create the plot
ggplot(polymorphisms_long, aes(x = residue, y = freq, fill = amino_acid)) +
geom_bar(stat = "identity", width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
coord_cartesian(ylim = c(0, 0.05)) +  # Adjust these values as needed
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Frequency")
polymorphisms <- read.csv("data_summary/AA_polymorphisms_dense.csv", header=TRUE)
# Function to replace the most common amino acid with NA, except for E.V159
replace_most_common <- function(x, name) {
if (name == "E.V159") return(x)
most_common <- names(which.max(table(x)))
x[x == most_common] <- NA
return(x)
}
# Apply the function to each column (except the first one)
polymorphisms_filtered <- polymorphisms
polymorphisms_filtered[-1] <- lapply(names(polymorphisms_filtered[-1]), function(name) replace_most_common(polymorphisms_filtered[[name]], name))
polymorphisms_long <- polymorphisms_filtered %>% pivot_longer(cols = -accession, names_to = "residue", values_to = "amino_acid")
#calculate frequency of mutations
polymorphisms_long <- polymorphisms_long %>%
group_by(residue) %>%
mutate(freq = n() / sum(n()))
# Remove rows with NA in the 'amino_acid' column
polymorphisms_long <- na.omit(polymorphisms_long)
# Remove rows with '-' in the 'amino_acid' column
polymorphisms_long <- polymorphisms_long %>% filter(amino_acid != '-')
# Convert 'residue' to a factor and specify the levels
polymorphisms_long$residue <- factor(polymorphisms_long$residue, levels = names(polymorphisms_filtered)[-1])
# Create the plot
ggplot(polymorphisms_long, aes(x = residue, y = freq, fill = amino_acid)) +
geom_bar(stat = "identity", width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
coord_cartesian(ylim = c(0, 0.05)) +  # Adjust these values as needed
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Frequency")
ggplot(polymorphisms_long, aes(x = residue, y = ..count../1211, fill = amino_acid)) +
geom_bar(width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
coord_cartesian(ylim = c(0, 0.05)) +  # Adjust these values as needed
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Frequency")
ggplot(polymorphisms_long, aes(x = residue, y = ..count../1211, fill = amino_acid)) +
geom_bar(width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
coord_cartesian(ylim = c(0, 0.25)) +  # Adjust these values as needed
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Frequency")
polymorphisms <- read.csv("data_summary/AA_polymorphisms_dense.csv", header=TRUE)
View(polymorphisms)
polymorphisms <- read.csv("data_summary/AA_polymorphisms_dense.csv", header=TRUE)
# Function to replace the most common amino acid with NA, except for E.V159
replace_most_common <- function(x, name) {
if (name == "E.V159") return(x)
most_common <- names(which.max(table(x)))
x[x == most_common] <- NA
return(x)
}
# Apply the function to each column (except the first one)
polymorphisms_filtered <- polymorphisms
polymorphisms_filtered[-1] <- lapply(names(polymorphisms_filtered[-1]), function(name) replace_most_common(polymorphisms_filtered[[name]], name))
polymorphisms_long <- polymorphisms_filtered %>% pivot_longer(cols = -accession, names_to = "residue", values_to = "amino_acid")
# Remove rows with NA in the 'amino_acid' column
polymorphisms_long <- na.omit(polymorphisms_long)
# Remove rows with '-' in the 'amino_acid' column
polymorphisms_long <- polymorphisms_long %>% filter(amino_acid != '-')
# Convert 'residue' to a factor and specify the levels
polymorphisms_long$residue <- factor(polymorphisms_long$residue, levels = names(polymorphisms_filtered)[-1])
ggplot(polymorphisms_long, aes(x = residue, y = ..count../1211, fill = amino_acid)) +
geom_bar(width = 0.7) +
scale_x_discrete(breaks = function(x) x[seq(1, length(x), by = 20)]) +
coord_cartesian(ylim = c(0, 0.25)) +  # Adjust these values as needed
theme_minimal() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = "none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()) +
labs(x = "Residue", y = "Frequency")
View(filtered_metadata)
View(filtered_metadata)
##----------------------- time series for common mutations -------------#
library(lubridate)
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4.A85T = sum(NS4.A85T),
NS2A.R188K = sum(NS2A.R188K),
NS4B.I240M = sum(NS4B.I240M),
NS5.k314R = sum(NS5.k314R))
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T),
NS2A.R188K = sum(NS2A.R188K),
NS4B.I240M = sum(NS4B.I240M),
NS5.k314R = sum(NS5.k314R))
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T),
NS2A.R188K = sum(NS2A.R188K),
NS4B.I240M = sum(NS4B.I240M),
NS5.K314R = sum(NS5.K314R))
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "count", -year)
# Create the line plot
ggplot(mutations_long, aes(x = year, y = count, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Count of mutations", color = "Mutation") +
theme_minimal()
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.k314R = sum(NS5.k314R) / n())
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Create the line plot
ggplot(mutations_long, aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the second plot for NS2A.R188K and NS4B.I240M
plot2 <- ggplot(mutations_long %>% filter(mutation %in% c("NS2A.R188K", "NS4B.I240M")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Combine the plots
grid.arrange(plot1, plot2, ncol=1)
library(gridExtra)
install.packages("gridExtra")
install.packages("gridExtra")
library(gridExtra)
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the second plot for NS2A.R188K and NS4B.I240M
plot2 <- ggplot(mutations_long %>% filter(mutation %in% c("NS2A.R188K", "NS4B.I240M")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Combine the plots
grid.arrange(plot1, plot2, ncol=1)
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Calculate the count of samples by region and year
region_by_year <- filtered_metadata %>%
group_by(year, region_name) %>%
summarise(count = n())
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the second plot for NS2A.R188K and NS4B.I240M
plot2 <- ggplot(mutations_long %>% filter(mutation %in% c("NS2A.R188K", "NS4B.I240M")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the third plot for the sampling of regions over time
plot3 <- ggplot(region_by_year, aes(x = year, y = count, color = region_name)) +
geom_line() +
labs(x = "Year", y = "Count of samples", color = "Region") +
theme_minimal()
# Combine the plots
grid.arrange(plot1, plot2, plot3, ncol=1)
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Calculate the frequency of samples by region and year
region_by_year <- filtered_metadata %>%
group_by(year, region_name) %>%
summarise(frequency = n() / n())
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
(x = year, y = frequency, color = mutation)) +
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Calculate the total number of samples per year
total_samples_per_year <- filtered_metadata %>%
group_by(year) %>%
summarise(total = n())
# Calculate the count of samples by region and year
region_by_year <- filtered_metadata %>%
group_by(year, region_name) %>%
summarise(count = n())
# Join the two dataframes and calculate the frequency
region_by_year <- region_by_year %>%
left_join(total_samples_per_year, by = "year") %>%
mutate(frequency = count / total)
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the second plot for NS2A.R188K and NS4B.I240M
plot2 <- ggplot(mutations_long %>% filter(mutation %in% c("NS2A.R188K", "NS4B.I240M")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the third plot for the sampling of regions over time
plot3 <- ggplot(region_by_year, aes(x = year, y = frequency, color = region_name)) +
geom_line() +
labs(x = "Year", y = "Frequency of samples", color = "Region") +
theme_minimal()
# Combine the plots
grid.arrange(plot1, plot2, plot3, ncol=1)
#import and process data
WNV_metadata <- read.csv("data_summary/Summary_13_feb_2024.csv", header = TRUE)
accessions_of_good_genomes <- read.csv("data_summary/AA_polymorphisms_sparse_filtered.csv", header = TRUE)
filtered_metadata <- merge(WNV_metadata, accessions_of_good_genomes, by = "accession")
filtered_metadata <- filtered_metadata[filtered_metadata$county != "", ]
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Calculate the total number of samples per year
total_samples_per_year <- filtered_metadata %>%
group_by(year) %>%
summarise(total = n())
# Calculate the count of samples by region and year
region_by_year <- filtered_metadata %>%
group_by(year, region_name) %>%
summarise(count = n())
# Join the two dataframes and calculate the frequency
region_by_year <- region_by_year %>%
left_join(total_samples_per_year, by = "year") %>%
mutate(frequency = count / total)
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the second plot for NS2A.R188K and NS4B.I240M
plot2 <- ggplot(mutations_long %>% filter(mutation %in% c("NS2A.R188K", "NS4B.I240M")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the third plot for the sampling of regions over time
plot3 <- ggplot(region_by_year, aes(x = year, y = frequency, color = region_name)) +
geom_line() +
labs(x = "Year", y = "Frequency of samples", color = "Region") +
theme_minimal()
# Combine the plots
grid.arrange(plot1, plot2, plot3, ncol=1)
WNV_metadata <- read.csv("data_summary/Summary_13_feb_2024.csv", header = TRUE)
accessions_of_good_genomes <- read.csv("data_summary/AA_polymorphisms_sparse_filtered.csv", header = TRUE)
filtered_metadata <- merge(WNV_metadata, accessions_of_good_genomes, by = "accession")
filtered_metadata <- filtered_metadata[filtered_metadata$county != "", ]
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Calculate the total number of samples per year
total_samples_per_year <- filtered_metadata %>%
group_by(year) %>%
summarise(total = n())
# Calculate the count of samples by region and year
region_by_year <- filtered_metadata %>%
group_by(year, region_name) %>%
summarise(count = n())
# Join the two dataframes and calculate the frequency
region_by_year <- region_by_year %>%
left_join(total_samples_per_year, by = "year") %>%
mutate(frequency = count / total)
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the second plot for NS2A.R188K and NS4B.I240M
plot2 <- ggplot(mutations_long %>% filter(mutation %in% c("NS2A.R188K", "NS4B.I240M")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the third plot for the sampling of regions over time
plot3 <- ggplot(region_by_year, aes(x = year, y = frequency, color = region_name)) +
geom_line() +
labs(x = "Year", y = "Frequency of samples", color = "Region") +
theme_minimal()
# Combine the plots
grid.arrange(plot1, plot2, plot3, ncol=1)
filtered_metadata <- filtered_metadata[filtered_metadata$FIPS != "", ]
# Convert 'collection_date' to a date format and extract the year
filtered_metadata$year <- year(dmy(filtered_metadata$collection_date))
# Calculate the sum of each mutation by year
mutations_by_year <- filtered_metadata %>%
group_by(year) %>%
summarise(NS4A.A85T = sum(NS4A.A85T) / n(),
NS2A.R188K = sum(NS2A.R188K) / n(),
NS4B.I240M = sum(NS4B.I240M) / n(),
NS5.K314R = sum(NS5.K314R) / n())
# Reshape the data to a long format
mutations_long <- mutations_by_year %>%
gather(key = "mutation", value = "frequency", -year)
# Calculate the total number of samples per year
total_samples_per_year <- filtered_metadata %>%
group_by(year) %>%
summarise(total = n())
# Calculate the count of samples by region and year
region_by_year <- filtered_metadata %>%
group_by(year, region_name) %>%
summarise(count = n())
# Join the two dataframes and calculate the frequency
region_by_year <- region_by_year %>%
left_join(total_samples_per_year, by = "year") %>%
mutate(frequency = count / total)
# Create the first plot for NS5.K314R and NS4A.A85T
plot1 <- ggplot(mutations_long %>% filter(mutation %in% c("NS5.K314R", "NS4A.A85T")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the second plot for NS2A.R188K and NS4B.I240M
plot2 <- ggplot(mutations_long %>% filter(mutation %in% c("NS2A.R188K", "NS4B.I240M")),
aes(x = year, y = frequency, color = mutation)) +
geom_line() +
labs(x = "Year", y = "Frequency of mutations", color = "Mutation") +
theme_minimal()
# Create the third plot for the sampling of regions over time
plot3 <- ggplot(region_by_year, aes(x = year, y = frequency, color = region_name)) +
geom_line() +
labs(x = "Year", y = "Frequency of samples", color = "Region") +
theme_minimal()
# Combine the plots
grid.arrange(plot1, plot2, plot3, ncol=1)
